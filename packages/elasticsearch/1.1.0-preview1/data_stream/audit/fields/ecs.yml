- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: The full HTTP request body.
  multi_fields:
    - name: text
      type: match_only_text
  name: http.request.body.content
  type: wildcard
- description: IP address of the source (IPv4 or IPv6).
  name: source.ip
  type: ip
- description: |-
    Unmodified original url as seen in the event source.
    Note that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.
    This field is meant to represent the URL as it was observed, complete or not.
  multi_fields:
    - name: text
      type: match_only_text
  name: url.original
  type: wildcard
- description: Short name or login of the user.
  multi_fields:
    - name: text
      type: match_only_text
  name: user.name
  type: keyword
- description: |-
    A unique identifier for each HTTP request to correlate logs between clients and servers in transactions.
    The id may be contained in a non-standard HTTP header, such as `X-Request-ID` or `X-Correlation-ID`.
  name: http.request.id
  type: keyword
- description: |-
    HTTP request method.
    Prior to ECS 1.6.0 the following guidance was provided:
    "The field value must be normalized to lowercase for querying."
    As of ECS 1.6.0, the guidance is deprecated because the original case of the method may be useful in anomaly detection.  Original case will be mandated in ECS 2.0.0
  name: http.request.method
  type: keyword
- description: |-
    Full path to the log file this event came from, including the file name. It should include the drive letter, when appropriate.
    If the event wasn't read from a log file, do not populate this field.
  name: log.file.path
  type: keyword
- description: |-
    Original log level of the log event.
    If the source of the event provides a log level or textual severity, this is the one that goes in `log.level`. If your source doesn't specify one, you may put your event transport's severity here (e.g. Syslog severity).
    Some examples are `warn`, `err`, `i`, `informational`.
  name: log.level
  type: keyword
- description: |-
    The type of the service data is collected from.
    The type can be used to group and correlate logs and metrics from one service type.
    Example: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`.
  name: service.type
  type: keyword
- description: |-
    Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.
    Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.
  name: source.address
  type: keyword
- description: Port of the source.
  name: source.port
  type: long
- description: |-
    Unique identifier of the trace.
    A trace groups multiple events like transactions that belong together. For example, a user request handled by multiple inter-connected services.
  name: trace.id
  type: keyword
- description: |-
    For log events the message field contains the log message, optimized for viewing in a log viewer.
    For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.
    If multiple messages exist, they can be combined into one message.
  name: message
  type: match_only_text
